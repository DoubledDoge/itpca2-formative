name: .NET CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - '**/*.csproj'
      - '**/*.sln'
      - '.github/workflows/**'
      - '.config/dotnet-tools.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - '**/*.csproj'
      - '**/*.sln'
      - '.github/workflows/**'
      - '.config/dotnet-tools.json'
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false

jobs:
  validate-tools:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate dotnet-tools.json
        run: |
          if [ -f ".config/dotnet-tools.json" ]; then
            echo "Validating dotnet-tools.json format..."
            cat .config/dotnet-tools.json | jq empty
            echo "✅ dotnet-tools.json is valid JSON"
          else
            echo "ℹ️ No dotnet-tools.json found"
          fi

  format-code:
    name: Code Formatting
    runs-on: windows-latest
    needs: validate-tools
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dotnet tools
      run: |
        if (Test-Path ".config/dotnet-tools.json") {
          Write-Host "Restoring dotnet tools..."
          dotnet tool restore
        } else {
          Write-Host "Installing csharpier globally..."
          dotnet tool install csharpier --global --version 0.29.2
        }

    - name: Format code with CSharpier
      run: |
        Write-Host "Formatting all C# code..."
        dotnet dotnet-csharpier .
        Write-Host "✅ Code formatting completed"

    - name: Check for formatting changes
      id: formatting-changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        if (git diff --quiet) {
          Write-Host "✅ No formatting changes needed"
          echo "changes=false" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "📝 Code formatting changes detected"
          echo "changes=true" >> $env:GITHUB_OUTPUT
          git add -A
          git status --porcelain
        }

    - name: Commit formatting changes
      if: steps.formatting-changes.outputs.changes == 'true' && github.event_name == 'push'
      run: |
        git commit -m "🎨 Auto-format code with CSharpier [skip ci]"
        git push origin ${{ github.ref_name }}
        Write-Host "✅ Formatting changes committed and pushed"

    - name: Comment on PR about formatting
      if: steps.formatting-changes.outputs.changes == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🎨 **Code formatting changes detected**\n\nYour code has been automatically formatted with CSharpier. Please pull the latest changes to sync your local branch:\n\n```bash\ngit pull origin ${{ github.head_ref }}\n```'
          });

    - name: Fail if formatting needed on PR
      if: steps.formatting-changes.outputs.changes == 'true' && github.event_name == 'pull_request'
      run: |
        Write-Host "❌ Code formatting changes required on PR"
        Write-Host "Please run 'dotnet dotnet-csharpier .' locally and commit the changes"
        exit 1

  build:
    name: Build Solutions
    runs-on: windows-latest
    needs: format-code
    permissions:
      contents: read
      actions: write

    strategy:
      fail-fast: false
      matrix:
        solution:
          - name: Project1Solution
            path: src/Project 1/Project1Solution.sln
          - name: Project2Solution
            path: src/Project 2/Project2Solution.sln

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'push' && github.ref || github.head_ref }}

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
          9.0.x

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ~/.nuget/http-cache
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj', '**/*.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore NuGet packages
      run: |
        Write-Host "Restoring packages for: ${{ matrix.solution.name }}"
        dotnet restore "${{ matrix.solution.path }}" --verbosity minimal

        # Also restore any standalone projects
        Get-ChildItem -Path src -Recurse -Include *.csproj | Where-Object {
          $projectDir = $_.Directory.FullName
          $solutionDir = Split-Path "${{ matrix.solution.path }}" -Parent
          $projectDir -notlike "$solutionDir*"
        } | ForEach-Object {
          Write-Host "Restoring standalone project: $($_.Name)"
          dotnet restore $_.FullName --verbosity minimal
        }

    - name: Build solution
      run: |
        Write-Host "Building: ${{ matrix.solution.name }}"
        dotnet build "${{ matrix.solution.path }}" `
          --configuration Release `
          --no-restore `
          --verbosity minimal `
          --property:TreatWarningsAsErrors=true `
          --property:WarningsNotAsErrors="CS1591;CS0168;CS0219"

    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          **/bin/Release
          **/obj
        key: ${{ runner.os }}-build-${{ matrix.solution.name }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.solution.name }}-

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.solution.name }}
        path: |
          **/bin/Release/**/*.exe
          **/bin/Release/**/*.dll
          !**/bin/Release/**/ref/**
        retention-days: 7

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      security-events: write
      contents: read

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore packages for security scan
      run: |
        find src -name "*.sln" -exec dotnet restore {} \; --verbosity minimal

    - name: Run security audit
      run: |
        echo "🔍 Running NuGet security audit..."
        audit_output=$(dotnet list package --vulnerable --include-transitive 2>&1)
        echo "$audit_output"

        if echo "$audit_output" | grep -q "has the following vulnerable packages"; then
          echo "❌ Vulnerable packages detected!"
          echo "::error::Security vulnerabilities found in NuGet packages"
          exit 1
        else
          echo "✅ No vulnerable packages found"
        fi

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [format-code, build, security-scan]
    if: always()
    steps:
    - name: Generate build summary
      run: |
        echo "## 🚀 Build Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Formatting | ${{ needs.format-code.result == 'success' && '✅ Passed' || '❌ Failed' }} | CSharpier formatting check |" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Compile | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} | Multi-solution build |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || needs.security-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | NuGet vulnerability check |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Pipeline Trigger:** \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.format-code.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **All checks passed!** Your code is ready for deployment." >> $GITHUB_STEP_SUMMARY
        fi
name: .NET CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - '**/*.csproj'
      - '**/*.sln'
      - '.github/workflows/**'
      - '.config/dotnet-tools.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - '**/*.csproj'
      - '**/*.sln'
      - '.github/workflows/**'
      - '.config/dotnet-tools.json'
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false

jobs:
  validate-tools:
    name: Validate Tools Configuration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate dotnet-tools.json
        run: |
          if [ -f ".config/dotnet-tools.json" ]; then
            echo "Validating dotnet-tools.json format..."
            cat .config/dotnet-tools.json | jq empty
            echo "✅ dotnet-tools.json is valid JSON"
          else
            echo "ℹ️ No dotnet-tools.json found"
          fi

  build:
    name: Build & Test
    runs-on: windows-latest
    needs: validate-tools
    permissions:
      contents: read
      actions: write
      pull-requests: write
      security-events: write
      checks: write

    strategy:
      fail-fast: false
      matrix:
        solution:
          - name: Project1Solution
            path: src/Project 1/Project1Solution.sln
          - name: Project2Solution
            path: src/Project 2/Project2Solution.sln

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
          9.0.x

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ~/.nuget/http-cache
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj', '**/*.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dotnet tools
      run: |
        if (Test-Path ".config/dotnet-tools.json") {
          Write-Host "Restoring dotnet tools..."
          dotnet tool restore
        } else {
          Write-Host "No dotnet-tools.json found, installing csharpier directly..."
          dotnet tool install csharpier --global
        }

    - name: Verify csharpier installation
      run: |
        try {
          dotnet csharpier --version
          Write-Host "✅ CSharpier is ready"
        } catch {
          Write-Host "⚠️ CSharpier not found, skipping formatting"
          echo "SKIP_FORMATTING=true" >> $env:GITHUB_ENV
        }

    - name: Check code formatting
      run: |
        Write-Host "Checking code formatting..."
        dotnet csharpier --check .
        if ($LASTEXITCODE -ne 0) {
          Write-Host "❌ Code formatting issues detected. Run 'dotnet csharpier .' locally to fix."
          exit 1
        }
        Write-Host "✅ Code formatting is correct"

    - name: Restore NuGet packages
      run: |
        Write-Host "Restoring packages for: ${{ matrix.solution.name }}"
        dotnet restore "${{ matrix.solution.path }}" --verbosity minimal

        # Also restore any additional projects not in the solution
        Get-ChildItem -Path src -Recurse -Include *.csproj | Where-Object {
          $projectDir = $_.Directory.FullName
          $solutionDir = Split-Path "${{ matrix.solution.path }}" -Parent
          $projectDir -notlike "$solutionDir*"
        } | ForEach-Object {
          Write-Host "Restoring standalone project: $($_.Name)"
          dotnet restore $_.FullName --verbosity minimal
        }

    - name: Build solution
      run: |
        Write-Host "Building: ${{ matrix.solution.name }}"
        dotnet build "${{ matrix.solution.path }}" `
          --configuration Release `
          --no-restore `
          --verbosity minimal `
          --property:TreatWarningsAsErrors=true `
          --property:WarningsNotAsErrors="CS1591"

    - name: Run unit tests
      run: |
        Write-Host "Running tests for: ${{ matrix.solution.name }}"
        dotnet test "${{ matrix.solution.path }}" `
          --configuration Release `
          --no-build `
          --no-restore `
          --verbosity minimal `
          --logger trx `
          --results-directory TestResults `
          --collect:"XPlat Code Coverage" `
          --settings coverlet.runsettings

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.solution.name }}
        path: TestResults/**/*
        retention-days: 30

    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          **/bin/Release
          **/obj
        key: ${{ runner.os }}-build-${{ matrix.solution.name }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.solution.name }}-

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.solution.name }}
        path: |
          **/bin/Release/**
          !**/bin/Release/**/ref/**
          !**/bin/Release/**/*.pdb
        retention-days: 7

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore packages
      run: dotnet restore --verbosity minimal

    - name: Run security audit
      run: |
        echo "Running NuGet security audit..."
        dotnet list package --vulnerable --include-transitive 2>&1 | tee audit-results.txt
        if grep -q "has the following vulnerable packages" audit-results.txt; then
          echo "❌ Vulnerable packages detected!"
          cat audit-results.txt
          exit 1
        else
          echo "✅ No vulnerable packages found"
        fi

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: always()
    steps:
    - name: Generate summary
      run: |
        echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Success' || needs.security-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Ref:** \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY